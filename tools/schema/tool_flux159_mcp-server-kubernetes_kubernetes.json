{
  "tools": [
    {
      "name": "cleanup",
      "description": "Cleanup all managed resources",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "kubectl_get",
      "description": "Get or list Kubernetes resources by resource type, name, and optionally namespace",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string",
            "description": "Type of resource to get (e.g., pods, deployments, services, configmaps, events, etc.)"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource (optional - if not provided, lists all resources of the specified type)"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resource (optional - defaults to 'default' for namespaced resources)",
            "default": "default"
          },
          "output": {
            "type": "string",
            "enum": [
              "json",
              "yaml",
              "wide",
              "name",
              "custom"
            ],
            "description": "Output format",
            "default": "json"
          },
          "allNamespaces": {
            "type": "boolean",
            "description": "If true, list resources across all namespaces",
            "default": false
          },
          "labelSelector": {
            "type": "string",
            "description": "Filter resources by label selector (e.g. 'app=nginx')",
            "optional": true
          },
          "fieldSelector": {
            "type": "string",
            "description": "Filter resources by field selector (e.g. 'metadata.name=my-pod')",
            "optional": true
          },
          "sortBy": {
            "type": "string",
            "description": "Sort events by a field (default: lastTimestamp). Only applicable for events.",
            "optional": true
          }
        },
        "required": [
          "resourceType"
        ]
      }
    },
    {
      "name": "kubectl_describe",
      "description": "Describe Kubernetes resources by resource type, name, and optionally namespace",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string",
            "description": "Type of resource to describe (e.g., pods, deployments, services, etc.)"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource to describe"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resource (optional - defaults to 'default' for namespaced resources)",
            "default": "default"
          },
          "allNamespaces": {
            "type": "boolean",
            "description": "If true, describe resources across all namespaces",
            "default": false
          }
        },
        "required": [
          "resourceType",
          "name"
        ]
      }
    },
    {
      "name": "kubectl_list",
      "description": "List Kubernetes resources by resource type and optionally namespace",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string",
            "description": "Type of resource to list (e.g., pods, deployments, services, configmaps, etc.)"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resources (optional - defaults to 'default' for namespaced resources)",
            "default": "default"
          },
          "output": {
            "type": "string",
            "enum": [
              "json",
              "yaml",
              "wide",
              "name",
              "custom",
              "formatted"
            ],
            "description": "Output format - 'formatted' uses a resource-specific format with key information",
            "default": "formatted"
          },
          "allNamespaces": {
            "type": "boolean",
            "description": "If true, list resources across all namespaces",
            "default": false
          },
          "labelSelector": {
            "type": "string",
            "description": "Filter resources by label selector (e.g. 'app=nginx')",
            "optional": true
          },
          "fieldSelector": {
            "type": "string",
            "description": "Filter resources by field selector (e.g. 'metadata.name=my-pod')",
            "optional": true
          }
        },
        "required": [
          "resourceType"
        ]
      }
    },
    {
      "name": "kubectl_apply",
      "description": "Apply a Kubernetes YAML manifest from a string or file",
      "inputSchema": {
        "type": "object",
        "properties": {
          "manifest": {
            "type": "string",
            "description": "YAML manifest to apply"
          },
          "filename": {
            "type": "string",
            "description": "Path to a YAML file to apply (optional - use either manifest or filename)"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace to apply the resource to (optional)",
            "default": "default"
          },
          "dryRun": {
            "type": "boolean",
            "description": "If true, only validate the resource, don't apply it",
            "default": false
          },
          "force": {
            "type": "boolean",
            "description": "If true, immediately remove resources from API and bypass graceful deletion",
            "default": false
          }
        },
        "required": []
      }
    },
    {
      "name": "kubectl_delete",
      "description": "Delete Kubernetes resources by resource type, name, labels, or from a manifest file",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string",
            "description": "Type of resource to delete (e.g., pods, deployments, services, etc.)"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource to delete"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resource (optional - defaults to 'default' for namespaced resources)",
            "default": "default"
          },
          "labelSelector": {
            "type": "string",
            "description": "Delete resources matching this label selector (e.g. 'app=nginx')",
            "optional": true
          },
          "manifest": {
            "type": "string",
            "description": "YAML manifest defining resources to delete (optional)",
            "optional": true
          },
          "filename": {
            "type": "string",
            "description": "Path to a YAML file to delete resources from (optional)",
            "optional": true
          },
          "allNamespaces": {
            "type": "boolean",
            "description": "If true, delete resources across all namespaces",
            "default": false
          },
          "force": {
            "type": "boolean",
            "description": "If true, immediately remove resources from API and bypass graceful deletion",
            "default": false
          },
          "gracePeriodSeconds": {
            "type": "number",
            "description": "Period of time in seconds given to the resource to terminate gracefully",
            "optional": true
          }
        },
        "required": []
      }
    },
    {
      "name": "kubectl_create",
      "description": "Create Kubernetes resources using various methods (from file or using subcommands)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "dryRun": {
            "type": "boolean",
            "description": "If true, only validate the resource, don't actually create it",
            "default": false
          },
          "output": {
            "type": "string",
            "enum": [
              "json",
              "yaml",
              "name",
              "go-template",
              "go-template-file",
              "template",
              "templatefile",
              "jsonpath",
              "jsonpath-as-json",
              "jsonpath-file"
            ],
            "description": "Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file",
            "default": "yaml"
          },
          "validate": {
            "type": "boolean",
            "description": "If true, validate resource schema against server schema",
            "default": true
          },
          "manifest": {
            "type": "string",
            "description": "YAML manifest to create resources from"
          },
          "filename": {
            "type": "string",
            "description": "Path to a YAML file to create resources from"
          },
          "resourceType": {
            "type": "string",
            "description": "Type of resource to create (namespace, configmap, deployment, service, etc.)"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource to create"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace to create the resource in",
            "default": "default"
          },
          "fromLiteral": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Key-value pair for creating configmap (e.g. [\"key1=value1\", \"key2=value2\"])"
          },
          "fromFile": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path to file for creating configmap (e.g. [\"key1=/path/to/file1\", \"key2=/path/to/file2\"])"
          },
          "secretType": {
            "type": "string",
            "enum": [
              "generic",
              "docker-registry",
              "tls"
            ],
            "description": "Type of secret to create (generic, docker-registry, tls)"
          },
          "serviceType": {
            "type": "string",
            "enum": [
              "clusterip",
              "nodeport",
              "loadbalancer",
              "externalname"
            ],
            "description": "Type of service to create (clusterip, nodeport, loadbalancer, externalname)"
          },
          "tcpPort": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Port pairs for tcp service (e.g. [\"80:8080\", \"443:8443\"])"
          },
          "image": {
            "type": "string",
            "description": "Image to use for the containers in the deployment"
          },
          "replicas": {
            "type": "number",
            "description": "Number of replicas to create for the deployment",
            "default": 1
          },
          "port": {
            "type": "number",
            "description": "Port that the container exposes"
          },
          "schedule": {
            "type": "string",
            "description": "Cron schedule expression for the CronJob (e.g. \"*/5 * * * *\")"
          },
          "suspend": {
            "type": "boolean",
            "description": "Whether to suspend the CronJob",
            "default": false
          },
          "command": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Command to run in the container"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Labels to apply to the resource (e.g. [\"key1=value1\", \"key2=value2\"])"
          },
          "annotations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Annotations to apply to the resource (e.g. [\"key1=value1\", \"key2=value2\"])"
          }
        },
        "required": []
      }
    },
    {
      "name": "kubectl_logs",
      "description": "Get logs from Kubernetes resources like pods, deployments, or jobs",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string",
            "enum": [
              "pod",
              "deployment",
              "job",
              "cronjob"
            ],
            "description": "Type of resource to get logs from"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resource",
            "default": "default"
          },
          "container": {
            "type": "string",
            "description": "Container name (required when pod has multiple containers)",
            "optional": true
          },
          "tail": {
            "type": "number",
            "description": "Number of lines to show from end of logs",
            "optional": true
          },
          "since": {
            "type": "string",
            "description": "Show logs since relative time (e.g. '5s', '2m', '3h')",
            "optional": true
          },
          "sinceTime": {
            "type": "string",
            "description": "Show logs since absolute time (RFC3339)",
            "optional": true
          },
          "timestamps": {
            "type": "boolean",
            "description": "Include timestamps in logs",
            "default": false
          },
          "previous": {
            "type": "boolean",
            "description": "Include logs from previously terminated containers",
            "default": false
          },
          "follow": {
            "type": "boolean",
            "description": "Follow logs output (not recommended, may cause timeouts)",
            "default": false
          },
          "labelSelector": {
            "type": "string",
            "description": "Filter resources by label selector",
            "optional": true
          }
        },
        "required": [
          "resourceType",
          "name",
          "namespace"
        ]
      }
    },
    {
      "name": "kubectl_scale",
      "description": "Scale a Kubernetes deployment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the deployment to scale"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the deployment",
            "default": "default"
          },
          "replicas": {
            "type": "number",
            "description": "Number of replicas to scale to"
          },
          "resourceType": {
            "type": "string",
            "description": "Resource type to scale (deployment, replicaset, statefulset)",
            "default": "deployment"
          }
        },
        "required": [
          "name",
          "replicas"
        ]
      }
    },
    {
      "name": "kubectl_patch",
      "description": "Update field(s) of a resource using strategic merge patch, JSON merge patch, or JSON patch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string",
            "description": "Type of resource to patch (e.g., pods, deployments, services)"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource to patch"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resource",
            "default": "default"
          },
          "patchType": {
            "type": "string",
            "description": "Type of patch to apply",
            "enum": [
              "strategic",
              "merge",
              "json"
            ],
            "default": "strategic"
          },
          "patchData": {
            "type": "object",
            "description": "Patch data as a JSON object"
          },
          "patchFile": {
            "type": "string",
            "description": "Path to a file containing the patch data (alternative to patchData)"
          },
          "dryRun": {
            "type": "boolean",
            "description": "If true, only print the object that would be sent, without sending it",
            "default": false
          }
        },
        "required": [
          "resourceType",
          "name"
        ]
      }
    },
    {
      "name": "kubectl_rollout",
      "description": "Manage the rollout of a resource (e.g., deployment, daemonset, statefulset)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "subCommand": {
            "type": "string",
            "description": "Rollout subcommand to execute",
            "enum": [
              "history",
              "pause",
              "restart",
              "resume",
              "status",
              "undo"
            ],
            "default": "status"
          },
          "resourceType": {
            "type": "string",
            "description": "Type of resource to manage rollout for",
            "enum": [
              "deployment",
              "daemonset",
              "statefulset"
            ],
            "default": "deployment"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the resource",
            "default": "default"
          },
          "revision": {
            "type": "number",
            "description": "Revision to rollback to (for undo subcommand)",
            "optional": true
          },
          "toRevision": {
            "type": "number",
            "description": "Revision to roll back to (for history subcommand)",
            "optional": true
          },
          "timeout": {
            "type": "string",
            "description": "The length of time to wait before giving up (e.g., '30s', '1m', '2m30s')",
            "optional": true
          },
          "watch": {
            "type": "boolean",
            "description": "Watch the rollout status in real-time until completion",
            "default": false
          }
        },
        "required": [
          "subCommand",
          "resourceType",
          "name"
        ]
      }
    },
    {
      "name": "kubectl_context",
      "description": "Manage Kubernetes contexts - list, get, or set the current context",
      "inputSchema": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "enum": [
              "list",
              "get",
              "set"
            ],
            "description": "Operation to perform: list contexts, get current context, or set current context",
            "default": "list"
          },
          "name": {
            "type": "string",
            "description": "Name of the context to set as current (required for set operation)"
          },
          "showCurrent": {
            "type": "boolean",
            "description": "When listing contexts, highlight which one is currently active",
            "default": true
          },
          "detailed": {
            "type": "boolean",
            "description": "Include detailed information about the context",
            "default": false
          },
          "output": {
            "type": "string",
            "enum": [
              "json",
              "yaml",
              "name",
              "custom"
            ],
            "description": "Output format",
            "default": "json"
          }
        },
        "required": [
          "operation"
        ]
      }
    },
    {
      "name": "explain_resource",
      "description": "Get documentation for a Kubernetes resource or field",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "Resource name or field path (e.g. 'pods' or 'pods.spec.containers')"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version to use (e.g. 'apps/v1')"
          },
          "recursive": {
            "type": "boolean",
            "description": "Print the fields of fields recursively",
            "default": false
          },
          "output": {
            "type": "string",
            "description": "Output format (plaintext or plaintext-openapiv2)",
            "enum": [
              "plaintext",
              "plaintext-openapiv2"
            ],
            "default": "plaintext"
          }
        },
        "required": [
          "resource"
        ]
      }
    },
    {
      "name": "install_helm_chart",
      "description": "Install a Helm chart",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Release name"
          },
          "chart": {
            "type": "string",
            "description": "Chart name"
          },
          "repo": {
            "type": "string",
            "description": "Chart repository URL"
          },
          "namespace": {
            "type": "string",
            "description": "Kubernetes namespace"
          },
          "values": {
            "type": "object",
            "description": "Chart values",
            "properties": {},
            "additionalProperties": true
          }
        },
        "required": [
          "name",
          "chart",
          "repo",
          "namespace"
        ]
      }
    },
    {
      "name": "upgrade_helm_chart",
      "description": "Upgrade a Helm release",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Release name"
          },
          "chart": {
            "type": "string",
            "description": "Chart name"
          },
          "repo": {
            "type": "string",
            "description": "Chart repository URL"
          },
          "namespace": {
            "type": "string",
            "description": "Kubernetes namespace"
          },
          "values": {
            "type": "object",
            "description": "Chart values",
            "properties": {},
            "additionalProperties": true
          }
        },
        "required": [
          "name",
          "chart",
          "repo",
          "namespace"
        ]
      }
    },
    {
      "name": "uninstall_helm_chart",
      "description": "Uninstall a Helm release",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Release name"
          },
          "namespace": {
            "type": "string",
            "description": "Kubernetes namespace"
          }
        },
        "required": [
          "name",
          "namespace"
        ]
      }
    },
    {
      "name": "port_forward",
      "description": "Forward a local port to a port on a Kubernetes resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "localPort": {
            "type": "number"
          },
          "targetPort": {
            "type": "number"
          },
          "namespace": {
            "type": "string"
          }
        },
        "required": [
          "resourceType",
          "resourceName",
          "localPort",
          "targetPort"
        ]
      }
    },
    {
      "name": "stop_port_forward",
      "description": "Stop a port-forward process",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    {
      "name": "list_api_resources",
      "description": "List the API resources available in the cluster",
      "inputSchema": {
        "type": "object",
        "properties": {
          "apiGroup": {
            "type": "string",
            "description": "API group to filter by"
          },
          "namespaced": {
            "type": "boolean",
            "description": "If true, only show namespaced resources"
          },
          "verbs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of verbs to filter by"
          },
          "output": {
            "type": "string",
            "description": "Output format (wide, name, or no-headers)",
            "enum": [
              "wide",
              "name",
              "no-headers"
            ],
            "default": "wide"
          }
        }
      }
    },
    {
      "name": "kubectl_generic",
      "description": "Execute any kubectl command with the provided arguments and flags",
      "inputSchema": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The kubectl command to execute (e.g. patch, rollout, top)"
          },
          "subCommand": {
            "type": "string",
            "description": "Subcommand if applicable (e.g. 'history' for rollout)",
            "optional": true
          },
          "resourceType": {
            "type": "string",
            "description": "Resource type (e.g. pod, deployment)",
            "optional": true
          },
          "name": {
            "type": "string",
            "description": "Resource name",
            "optional": true
          },
          "namespace": {
            "type": "string",
            "description": "Namespace",
            "default": "default",
            "optional": true
          },
          "outputFormat": {
            "type": "string",
            "description": "Output format (e.g. json, yaml, wide)",
            "enum": [
              "json",
              "yaml",
              "wide",
              "name",
              "custom"
            ],
            "optional": true
          },
          "flags": {
            "type": "object",
            "description": "Command flags as key-value pairs",
            "optional": true,
            "additionalProperties": true
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional command arguments",
            "optional": true
          }
        },
        "required": [
          "command"
        ]
      }
    }
  ]
}
